// <auto-generated />

namespace EnergyTrading.UnitTest.Data
{
    using System;
    using System.Data.Entity;

    using NUnit.Framework;

    using Moq;

    using EnergyTrading.Data.EntityFramework;

    [TestFixture]
    public class DbSetExtensionsFixture
    {
        [Test]
        public void ShouldReturnSameEntityIfNoExceptionRaisedOnFindOneRequest()
        {
            //Given
            var mockdbSet = new Mock<IDbSet<TestEntity>>();
            var entity = new TestEntity();
            mockdbSet.Setup(x => x.Find(It.IsAny<object>())).Returns(entity);

            // When
            var result = mockdbSet.Object.FindEx(1);

            //Then
            Assert.IsNotNull(result);
            Assert.AreEqual(entity, result);
        }

        [Test]
        public void ShouldReturnNullIfEFThrowsMaterializedCastInvalidOperationExceptionOnFindOneRequest()
        {
            //Given
            var mockdbSet = new Mock<IDbSet<TestEntity>>();
            mockdbSet.Setup(x => x.Find(It.IsAny<object>()))
                .Throws(new InvalidOperationException("The specified cast from a materialized 'System.Data.Entity.DynamicProxies.Entity_adfafa' type to the 'TestEntity' type is not valid."));

            // When
            var result = mockdbSet.Object.FindEx(1);

            //Then
            Assert.IsNull(result);
        }

        [Test]
        public void ShouldNotSupressAnyExceptionOtherThanMaterializedCastInvalidOperationExceptionOnFindOneRequest()
        {
            //Given
            var mockdbSet = new Mock<IDbSet<TestEntity>>();
            mockdbSet.Setup(x => x.Find(It.IsAny<object>()))
                .Throws(new Exception("This is not materialized cast exception"));

            // When
            Assert.Throws<Exception>(() => mockdbSet.Object.FindEx(1));

            //Then
        }
    }

    public class TestEntity
    {
    }
}